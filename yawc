#!/usr/bin/env python3
from WebWhatsapp.webwhatsapi import WhatsAPIDriver
from WebWhatsapp.webwhatsapi.objects.message import Message,MMSMessage
import code
import json
import argparse
import sys
import glob
import os.path as op
import atexit
import psutil
import appdirs
import shelve

LOG = sys.stdout
DATABASE = None
DRIVER = None
class MyCompleter(object):
    def __init__(self, options): self.options = sorted(options)
    def complete(self, text, state):
        if state == 0:
            if text: self.matches = [s for s in self.options if s and s.startswith(text)]
            else: self.matches = self.options[:]
        try: return self.matches[state]
        except IndexError: return None

def exit_gracefully():
    DRIVER.close()
    try: 
        for proc in psutil.process_iter():
            if proc.name() == 'geckodriver': proc.kill()
        if DATABASE: DATABASE.dump()
    except Exception as e: 
        code.interact(local=locals())
    finally: sys.exit(0)

def main(args):
    global DRIVER
    DEBUG = args.verbose
    if args.log: 
        global LOG
        try: LOG = open(args.log, 'w') 
        except Exception as e: print(e) and sys.exit(0)
    if not args.profile: 
        try: args.profile = glob.glob(op.expanduser('~/.waterfox/*.default*'))[0]
        except: args.profile = glob.glob(op.expanduser('~/.mozilla/firefox/*.default*'))[0] 
    if not op.exists(args.profile): 
        DEBUG and print('Profile not found %s' % args.profile)
        sys.exit(1)
    DEBUG and print('Starting driver with profile at %s' % args.profile, file=LOG)
    DRIVER = WhatsAPIDriver(profile=args.profile,headless=not args.render)
    DATABASE = shelve.open(appdirs.user_cache_dir('yawc.shelve'))
    atexit.register(exit_gracefully)
    DEBUG and print('Profile loaded. Waiting for login...', file=LOG)
    DRIVER.wait_for_login()
    DEBUG and print('Logged in', file=LOG)
    def log_json(d): 
        global LOG
        print(json.dumps(d, indent=4), file=LOG)
    if args.chats: 
        chats = DRIVER.get_all_chats()
        # if 'chats' not in DATABASE or args.fetch:
            # DATABASE.update({'chats': chats})
        log_json({'chats' : [[c.name, c.id] for c in chats if c.name]})
    elif args.my_contacts: 
        my_contacts = DRIVER.get_my_contacts()
        # if 'my_contacts' not in DATABASE or args.fetch:
        #     DATABASE.update({'my_contacts': my_contacts})
        log_json({'my_contacts': [[c.name, c.id] for c in my_contacts]})
    elif args.contacts: 
        contacts = DRIVER.get_contacts()
        # if 'contacts' not in DATABASE or args.fetch:
        #     DATABASE['contacts'] = contacts
        log_json({'all_contacts': [[c.name, c.id] for c in contacts]})
    elif args.send: 
        if args.multimedia: pass # read multimedia file argument
        DRIVER.send_message_to_id(args.target, ''.join(sys.stdin.readlines()) if args.send == '-' else args.send)
    elif args.events: 
        pass

def test_get_chat_content():
    global DRIVER
    profile = glob.glob(op.expanduser('~/.waterfox/*.default*'))[0]
    DRIVER = WhatsAPIDriver(profile=profile)
    atexit.register(exit_gracefully)
    cs = DRIVER.get_all_chats()
    ms = cs[0].get_messages()
    m = ms[0]
    code.interact(local=globals().update(locals()) or globals())
    sys.exit(0)

if __name__ == '__main__': 
    parser = argparse.ArgumentParser(prog='yawc', description='Interface for WebWhatsapp-Wrapper API')
    actions = parser.add_mutually_exclusive_group(required=True)
    actions.add_argument('-c', '--chats',                action='store_true',        help='show chats')
    actions.add_argument('-C', '--contacts',             action='store_true',        help='show all contacts ever seen by this account')
    actions.add_argument('-m', '--my-contacts',          action='store_true',        help='show my contacts (added to address book)')
    actions.add_argument('-s', '--send',                 metavar='MESSAGE',          help='send message. If MESSAGE is \'-\', read from stdin. Requires --target flag')
    actions.add_argument('-S', '--show',                 action='store_true',        help='show chat log for contact. Requires --target flag')
    actions.add_argument('-B', '--broadcast',            metavar='MESSAGE',          help='send message to all chats')
    actions.add_argument('-b', '--broadcast-contacts',   metavar='MESSAGE',          help='send message to all contacts')
    actions.add_argument('-e', '--events',               metavar='DURATION',         help='watch events (default duration=Infinity)', nargs='?', default=-1)
    parser.add_argument( '-M',  '--multimedia',          metavar='LOCATION',         help='attach multimedia file when using --send')
    parser.add_argument( '-R',  '--render',              action='store_true',        help='render browser', default=False)
    parser.add_argument( '-t', '--target',               metavar='[CONTACT|CHAT]',   help='apply command to target CONTACT or CHAT', required='-s' in sys.argv or '--send' in sys.argv)
    parser.add_argument( '-D', '--save-directory',       metavar='PATH',             help='specify directory where to safe multimedia', default='.')
    parser.add_argument( '-f', '--fetch',                action='store_true',        help='get internal database up to date', default=False)
    parser.add_argument( '-v', '--verbose',              action='store_true',        help='verbose logging')
    parser.add_argument( '-p', '--profile',              metavar='LOCATION',         help='use firefox profile contained in LOCATION (defaults to ~/.mozilla/firefox/*.default)')
    parser.add_argument( '-l', '--log',                  metavar='LOCATION',         help='log to LOCATION')
    args = parser.parse_args()
    main(args)
